__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../node_modules/react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _jsxFileName = "/home/monopolized/github/languagescavengers/UI/components/ExpoCamera.js";

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _reactNative = _require(_dependencyMap[2], "react-native");

  var _expo = _require(_dependencyMap[3], "expo");

  var _ButtonTakePhoto = _require(_dependencyMap[4], "../components/ButtonTakePhoto");

  var _ButtonTakePhoto2 = _interopRequireDefault(_ButtonTakePhoto);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    ExpoCamera: {
      displayName: "ExpoCamera"
    }
  };

  var _node_modulesReactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/home/monopolized/github/languagescavengers/UI/components/ExpoCamera.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _node_modulesReactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var ExpoCamera = _wrapComponent("ExpoCamera")(function (_React$Component) {
    _inherits(ExpoCamera, _React$Component);

    function ExpoCamera() {
      var _ref;

      var _temp, _this, _ret;

      _classCallCheck(this, ExpoCamera);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ExpoCamera.__proto__ || Object.getPrototypeOf(ExpoCamera)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
        hasCameraPermission: null,
        type: _expo.Camera.Constants.Type.back
      }, _this.takePicture = function () {
        if (_this.camera) {
          _this.camera.takePictureAsync({
            onPictureSaved: _this.handleTakePicture
          });
        }

        _this.props.clickHandler();
      }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(ExpoCamera, [{
      key: "componentWillMount",
      value: function componentWillMount() {
        var _ref2, status;

        return regeneratorRuntime.async(function componentWillMount$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return regeneratorRuntime.awrap(_expo.Permissions.askAsync(_expo.Permissions.CAMERA));

              case 2:
                _ref2 = _context.sent;
                status = _ref2.status;
                this.setState({
                  hasCameraPermission: status === 'granted'
                });

              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, null, this);
      }
    }, {
      key: "render",
      value: function render() {
        var hasCameraPermission = this.state.hasCameraPermission;

        if (hasCameraPermission === null) {
          return _react3.default.createElement(_reactNative.View, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 33
            }
          });
        } else if (hasCameraPermission === false) {
          return _react3.default.createElement(
            _reactNative.Text,
            {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 35
              }
            },
            "No access to camera"
          );
        } else {
          return _react3.default.createElement(
            _reactNative.View,
            {
              style: {
                flex: 1
              },
              __source: {
                fileName: _jsxFileName,
                lineNumber: 38
              }
            },
            _react3.default.createElement(
              _expo.Camera,
              {
                style: {
                  flex: 1
                },
                type: this.state.type,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 39
                }
              },
              _react3.default.createElement(
                _reactNative.View,
                {
                  style: styles.container,
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 40
                  }
                },
                _react3.default.createElement(_ButtonTakePhoto2.default, {
                  style: styles.CameraButton,
                  clickHandler: this.takePicture,
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 41
                  }
                })
              )
            )
          );
        }
      }
    }]);

    return ExpoCamera;
  }(_react3.default.Component));

  exports.default = ExpoCamera;

  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1,
      alignItems: 'center',
      justifyContent: 'flex-end'
    },
    FlipButton: {
      alignItems: 'center',
      padding: 10
    },
    FlipText: {
      fontSize: 18,
      marginBottom: 10,
      color: 'white'
    },
    CameraButton: {}
  });
});