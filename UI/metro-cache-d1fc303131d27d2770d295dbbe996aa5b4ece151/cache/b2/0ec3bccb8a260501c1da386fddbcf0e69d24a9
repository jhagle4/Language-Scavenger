__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _react2 = _require(_dependencyMap[0], "react");

    var _react3 = _interopRequireDefault(_react2);

    var _index = _require(_dependencyMap[1], "./../node_modules/react-transform-hmr/lib/index.js");

    var _index2 = _interopRequireDefault(_index);

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    var _class,
        _temp,
        _jsxFileName = "/home/monopolized/github/CS470_Project/UI/screens/SettingScreen.js";

    var _reactNavigation = _require(_dependencyMap[2], "react-navigation");

    var _reactNative = _require(_dependencyMap[3], "react-native");

    var _LanguageSelectTile = _require(_dependencyMap[4], "../components/LanguageSelectTile");

    var _LanguageSelectTile2 = _interopRequireDefault(_LanguageSelectTile);

    var _VolumeTile = _require(_dependencyMap[5], "../components/VolumeTile");

    var _VolumeTile2 = _interopRequireDefault(_VolumeTile);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _components = {
        SettingScreen: {
            displayName: "SettingScreen"
        }
    };

    var _node_modulesReactTransformHmrLibIndexJs2 = (0, _index2.default)({
        filename: "/home/monopolized/github/CS470_Project/UI/screens/SettingScreen.js",
        components: _components,
        locals: [module],
        imports: [_react3.default]
    });

    function _wrapComponent(id) {
        return function (Component) {
            return _node_modulesReactTransformHmrLibIndexJs2(Component, id);
        };
    }

    var SettingScreen = _wrapComponent("SettingScreen")((_temp = _class = function (_React$Component) {
        _inherits(SettingScreen, _React$Component);

        function SettingScreen() {
            _classCallCheck(this, SettingScreen);

            return _possibleConstructorReturn(this, (SettingScreen.__proto__ || Object.getPrototypeOf(SettingScreen)).apply(this, arguments));
        }

        _createClass(SettingScreen, [{
            key: "render",
            value: function render() {
                return _react3.default.createElement(
                    _reactNative.ScrollView,
                    {
                        style: styles.container,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 23
                        }
                    },
                    _react3.default.createElement(
                        _reactNative.View,
                        {
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 24
                            }
                        },
                        _react3.default.createElement(
                            _reactNative.View,
                            {
                                style: styles.container,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 25
                                }
                            },
                            _react3.default.createElement(_reactNative.Image, {
                                style: styles.earth,
                                source: _require(_dependencyMap[6], '../assets/Gear.png'),
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 26
                                }
                            })
                        ),
                        _react3.default.createElement(_LanguageSelectTile2.default, {
                            navigation: this.props.navigation,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 31
                            }
                        }),
                        _react3.default.createElement(_VolumeTile2.default, {
                            navigation: this.props.navigation,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 32
                            }
                        })
                    )
                );
            }
        }]);

        return SettingScreen;
    }(_react3.default.Component), _class.navigationOptions = {
        headerTransparent: true
    }, _temp));

    exports.default = SettingScreen;

    var styles = _reactNative.StyleSheet.create({
        container: {
            flex: 1,
            backgroundColor: '#ADD8E6',
            paddingTop: 35
        },
        earthcontainer: {
            width: '100%',
            alignItems: 'center'
        },
        logoText: {
            fontSize: 30,
            color: 'rgba(96,100,109, 1)',
            lineHeight: 24,
            textAlign: 'center',
            fontWeight: 'bold'
        },
        earth: {
            resizeMode: 'contain'
        },
        headerSubText: {
            fontSize: 14,
            color: 'rgba(96,100,109, 1)',
            lineHeight: 24,
            textAlign: 'center',
            padding: 5
        }
    });
});