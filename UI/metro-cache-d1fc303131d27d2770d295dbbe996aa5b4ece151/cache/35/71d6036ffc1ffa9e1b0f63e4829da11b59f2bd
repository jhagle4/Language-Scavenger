__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _react2 = _require(_dependencyMap[0], "react");

    var _react3 = _interopRequireDefault(_react2);

    var _index = _require(_dependencyMap[1], "./../node_modules/react-transform-hmr/lib/index.js");

    var _index2 = _interopRequireDefault(_index);

    var _jsxFileName = "/home/monopolized/github/CS470_Project/UI/components/LanguageSelectTile.js";

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    var _reactNative = _require(_dependencyMap[2], "react-native");

    var _vectorIcons = _require(_dependencyMap[3], "@expo/vector-icons");

    var _Card = _require(_dependencyMap[4], "./Card");

    var _Card2 = _interopRequireDefault(_Card);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _components = {
        SettingTile: {
            displayName: "SettingTile"
        }
    };

    var _node_modulesReactTransformHmrLibIndexJs2 = (0, _index2.default)({
        filename: "/home/monopolized/github/CS470_Project/UI/components/LanguageSelectTile.js",
        components: _components,
        locals: [module],
        imports: [_react3.default]
    });

    function _wrapComponent(id) {
        return function (Component) {
            return _node_modulesReactTransformHmrLibIndexJs2(Component, id);
        };
    }

    var SettingTile = _wrapComponent("SettingTile")(function (_React$Component) {
        _inherits(SettingTile, _React$Component);

        function SettingTile() {
            _classCallCheck(this, SettingTile);

            return _possibleConstructorReturn(this, (SettingTile.__proto__ || Object.getPrototypeOf(SettingTile)).apply(this, arguments));
        }

        _createClass(SettingTile, [{
            key: "render",
            value: function render() {
                var _this2 = this;

                return _react3.default.createElement(
                    _reactNative.TouchableHighlight,
                    {
                        onPress: function onPress() {
                            return _this2.props.navigation.navigate('SettingMode');
                        },
                        underlayColor: "white",
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 17
                        }
                    },
                    _react3.default.createElement(
                        _Card2.default,
                        {
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 21
                            }
                        },
                        _react3.default.createElement(
                            _reactNative.View,
                            {
                                style: styles.Header,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 22
                                }
                            },
                            _react3.default.createElement(_vectorIcons.FontAwesome, {
                                name: "search",
                                size: 30,
                                style: styles.MagnifyingGlass,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 23
                                }
                            }),
                            _react3.default.createElement(
                                _reactNative.Text,
                                {
                                    style: styles.TileHeaderText,
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 24
                                    }
                                },
                                " Settings "
                            )
                        ),
                        _react3.default.createElement(
                            _reactNative.View,
                            {
                                style: styles.SubHeader,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 26
                                }
                            },
                            _react3.default.createElement(
                                _reactNative.Text,
                                {
                                    style: styles.SubText,
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 27
                                    }
                                },
                                " Change Language "
                            ),
                            _react3.default.createElement(
                                _reactNative.Text,
                                {
                                    style: styles.SubText,
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 28
                                    }
                                },
                                " Adjust settings "
                            )
                        )
                    )
                );
            }
        }]);

        return SettingTile;
    }(_react3.default.Component));

    exports.default = SettingTile;

    var styles = _reactNative.StyleSheet.create({
        container: {
            flex: 1
        },
        Header: {
            flex: 1,
            flexDirection: 'row'
        },
        MagnifyingGlass: {
            padding: 10,
            color: 'rgba(96,100,109, 1)'
        },
        TileHeaderText: {
            fontSize: 30,
            paddingTop: 20,
            color: 'rgba(96,100,109, 1)',
            lineHeight: 24,
            textAlign: 'left',
            fontWeight: 'bold'
        },
        SubHeader: {
            flex: 1,
            flexDirection: 'row'
        },
        SubText: {
            fontSize: 17,
            padding: 10,
            color: 'rgba(96,100,109, 1)',
            lineHeight: 24,
            textAlign: 'left',
            fontWeight: 'bold'
        }
    });
});